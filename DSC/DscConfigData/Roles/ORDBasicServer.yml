Configurations:
  - ChocolateyPackages
  - FirewallRules
  - WindowsFeatures
  - FilesAndFolders
  - Scripts
  - RegistryValues
  - ORDRemoteDesktopAdmin

FilesAndFolders:
  Items:
    - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\accesschk64.exe
      DestinationPath: 'C:\Temp\accesschk64.exe'
      Type: File
    - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\NTRights.exe
      DestinationPath: 'C:\Temp\NTRights.exe'
      Type: File
    - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\ATP
      DestinationPath: 'C:\Temp\ATP'
      Type: Directory
      Recurse: True
    - SourcePath: \\v26267ncsp502\ORDchoco\FilesToCopy\BootHole
      DestinationPath: C:\BootHole
      Type: Directory
      # Recurse has to be specified as true, not $true or Enabled, or it will blow up
      Recurse: true
      MatchSource: true
      # Didn't work either - CheckSum: 'SHA-256' # This ensures that newer versions of existing files are copied over, but not that deletions happen
      # No good - CheckSum: 'createdDate' # This ensures that newer versions of existing files are copied over, but not that deletions happen
      #CheckSum: 'modifiedDate' # This ensures that newer versions of existing files are copied over, but not that deletions happen

#     - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\MSS-legacy.adml
#       DestinationPath: 'C:\Windows\PolicyDefinitions\en-US\MSS-legacy.adml'
#       Type: File
#     - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\SecGuide.adml
#       DestinationPath: C:\Windows\PolicyDefinitions\en-US\SecGuide.adml
#       Type: File
#     - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\MSS-legacy.admx
#       DestinationPath: 'C:\Windows\PolicyDefinitions\MSS-legacy.admx'
#       Type: File
#     - SourcePath: \\v26267ncsp502\ORDChoco\FilesToCopy\SecGuide.admx
#       DestinationPath: 'C:\Windows\PolicyDefinitions\SecGuide.admx'
#       Type: File
      # checksum: 'modifiedDate'
      # matchsource: True

FirewallRules:
  Rules:
    - Name: RemoteDesktop-UserMode-In-TCP
      #DisplayName: Any-Any Test
      Enabled: True
      #Description: Allow All Inbound Trafic
      Direction: Inbound
      Profile: Any
      Action: Allow
      LocalPort: Any
      RemotePort: Any
      Protocol: Any
    - Name: RemoteDesktop-UserMode-In-UDP
      Enabled: True
      Direction: Inbound
      Profile: Any
      Action: Allow
    - Name: RemoteDesktop-Shadow-In-TCP
      Enabled: True
      Direction: Inbound
      Profile: Any
      Action: Allow

ORDRemoteDesktopAdmin:
  ORD_RDA:
  - IsSingleInstance: 'Yes'
    Ensure: 'Present'
    UserAuthentication: 'Secure'

WindowsFeatures:
  Name:
    - RDC
    # Remove BranchCache, that I had installed by mistake because it was on other servers
    #- -BranchCache

ChocolateyPackages:
  Software:
    Ensure: Present
  Features:
    Name: useFipsCompliantChecksums
    Ensure: Present
  Sources:
    Name: ORDChoco
    Ensure: Present
    Source: '\\V26267NCSP502\ORDChoco'
    #Source: '\\V26265NCHH500\ORDChoco'
  Packages:
    - Name: laps
      Ensure: Present
      ChocolateyOptions:
        Source: ORDChoco
    - Name: sccm
      Ensure: Present
      ChocolateyOptions:
        Source: ORDChoco
    - Name: encase
      Ensure: Present
      ChocolateyOptions:
        Source: ORDChoco
    #- Name: bigfix
    #  Ensure: Present
    #  ChocolateyOptions:
    #    Source: ORDChoco
    - Name: MomAgent # Added 7/27/21, per Steven
      #Ensure: Absent
      Ensure: Present
      ChocolateyOptions:
        Source: ORDChoco

#        $Clients = @(Get-NetIPConfiguration | Get-NetConnectionProfile | Where-Object IPv4Connectivity -ne "NoTraffic" | Get-DNSClient)
# Disconnected NICs must be excluded from below tests, or it blows up.
# If TestScript is false, then SetScript will be run
# From GetScript:        Write-Verbose "In GetScript, found: $Found"
# From TestScript:        Write-Verbose "Hash.Result $($ReturnHash.Result)"

# $Found = @(Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows Advanced Threat Protection\Status' -Name 'OnboardingState')
# SilentlyContinue suppresses the error so that DSC continues.
Scripts:
  Items:
    # - Name: InstallATPDefender
    #   GetScript: |
    #     $Found = @(Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows Advanced Threat Protection\Status' -Name 'OnboardingState' -ErrorAction SilentlyContinue)
    #     Return @{ Result = $Found.count}
    #   TestScript: |
    #     $ReturnHash = [scriptblock]::Create($GetScript).Invoke()
    #     $ReturnHash.Result -eq 1
    #   SetScript: |
    #     c:\temp\ATP\WindowsDefenderATPLocalOnboardingScript.cmd
    - Name: GiveSCOMLogonRights
      GetScript: |
        $Found = @(c:\temp\AccessChk64.exe /accepteula -q -a SeServiceLogonRight | Where-Object {$_ -match 'sv-ord-eoc-scomact'})
        Return @{ Result = $Found.count}
      TestScript: |
        $ReturnHash = [scriptblock]::Create($GetScript).Invoke()
        $ReturnHash.Result -eq 1
      SetScript: |
        c:\temp\ntrights.exe -u sv-ord-eoc-scomact +r SeServiceLogonRight
    - Name: FixIPv6DHCP
      GetScript: |
        $Found = @(Get-NetIPInterface -AddressFamily 'IPv6' | Where-Object {$_.DHCP -ne 'disabled'})
        Return @{ Result = $Found.count}
      TestScript: |
        $ReturnHash = [scriptblock]::Create($GetScript).Invoke()
        $ReturnHash.Result -eq 0
      SetScript: |
        Set-NetIPInterface -AddressFamily IPv6 -Dhcp Disabled
        Set-NetIPInterface -AddressFamily IPv6 -RouterDiscovery Disabled
    - Name: DisableDynamicDNSRegistration
      GetScript: |
        $Clients = @(Get-NetIPConfiguration | Where-Object {$_.NetAdapter.Status -ne "Disconnected"} | Get-NetConnectionProfile | Where-Object IPv4Connectivity -ne "NoTraffic" | Get-DNSClient)
        $Found = @($Clients | Where-Object {$_.RegisterThisConnectionsAddress})
        Return @{ Result = $Found.count}
      TestScript: |
        $ReturnHash = [scriptblock]::Create($GetScript).Invoke()
        $ReturnHash.Result -eq 0
      SetScript: |
        $Clients = @(Get-NetIPConfiguration | Where-Object {$_.NetAdapter.Status -ne "Disconnected"} | Get-NetConnectionProfile | Where-Object IPv4Connectivity -ne "NoTraffic" | Get-DNSClient)
        Get-NetIPConfiguration | Where-Object {$_.NetAdapter.Status -ne "Disconnected"} | Get-NetConnectionProfile | Where-Object IPv4Connectivity -ne "NoTraffic" | Set-DNSClient -RegisterThisConnectionsAddress:$false
    - Name: FixBootHole
      # Successful run of _BootHole will create signature.p7
      # If we don't Chdir \BootHole, the current dir will be \windows\system32, and the .ps1 files inside the .cmd won't be found in that folder
      GetScript: |
        test-path C:\BootHole\signature.p7
      TestScript: |
        [scriptblock]::Create($GetScript).Invoke()
      SetScript: |
        Chdir \BootHole
        C:\BootHole\_BootHole.cmd

RegistryValues:
  Values:
    - Key: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters
      ValueName: NtpServer
      ValueData: time.windows.com,0x9
      ValueType: String
      Ensure: Present
      Force: true

PSDscAllowPlainTextPassword: True
PSDscAllowDomainUser: True
